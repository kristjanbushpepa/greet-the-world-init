
name: Keep Restaurant Databases Alive

on:
  schedule:
    # Run every 10 minutes for more reliable testing
    - cron: '*/10 * * * *'  # Every 10 minutes (temporary for testing)
    - cron: '30 18 * * 0'  # Sunday at 18:30 UTC (permanent schedule)
    - cron: '30 18 * * 3'  # Wednesday at 18:30 UTC (permanent schedule)
  workflow_dispatch: # Allow manual trigger

jobs:
  get-restaurants:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.restaurants.outputs.matrix }}
      has-restaurants: ${{ steps.restaurants.outputs.has-restaurants }}
    steps:
      - name: Get restaurant list
        id: restaurants
        run: |
          echo "Fetching restaurant list at $(date)..."
          
          # Call the edge function to get restaurant data
          response=$(curl -s -X GET \
            "https://zijfbnubzfonpxngmqqz.supabase.co/functions/v1/get-restaurants-for-ping" \
            -H "Content-Type: application/json")
          
          echo "Response: $response"
          
          # Extract the restaurants array and check if we have any
          restaurants=$(echo "$response" | jq -r '.restaurants // []')
          count=$(echo "$restaurants" | jq 'length')
          
          echo "Found $count restaurants at $(date)"
          
          if [ "$count" -gt 0 ]; then
            echo "matrix={\"include\":$(echo "$restaurants" | jq -c .)}" >> $GITHUB_OUTPUT
            echo "has-restaurants=true" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "has-restaurants=false" >> $GITHUB_OUTPUT
          fi

  ping-restaurants:
    needs: get-restaurants
    if: needs.get-restaurants.outputs.has-restaurants == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.get-restaurants.outputs.matrix) }}
      fail-fast: false # Continue with other restaurants even if one fails
    steps:
      - name: Ping ${{ matrix.name }}
        run: |
          echo "Pinging restaurant: ${{ matrix.name }} at $(date)"
          echo "URL: ${{ matrix.url }}"
          
          # Call the keep-alive function
          response=$(curl -s -X POST \
            "https://zijfbnubzfonpxngmqqz.supabase.co/functions/v1/keep-alive-restaurant" \
            -H "Content-Type: application/json" \
            -d '{
              "restaurantId": "${{ matrix.id }}",
              "restaurantName": "${{ matrix.name }}",
              "supabaseUrl": "${{ matrix.url }}",
              "supabaseKey": "${{ matrix.key }}"
            }')
          
          echo "Response: $response"
          
          # Check if the ping was successful
          success=$(echo "$response" | jq -r '.success // false')
          
          if [ "$success" = "true" ]; then
            echo "✅ Successfully pinged ${{ matrix.name }} at $(date)"
          else
            echo "❌ Failed to ping ${{ matrix.name }} at $(date)"
            error=$(echo "$response" | jq -r '.error // "Unknown error"')
            echo "Error: $error"
            exit 1
          fi

  summary:
    needs: [get-restaurants, ping-restaurants]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "=== Keep-Alive Job Summary at $(date) ==="
          if [ "${{ needs.get-restaurants.outputs.has-restaurants }}" = "false" ]; then
            echo "No restaurants found to ping"
          elif [ "${{ needs.ping-restaurants.result }}" = "success" ]; then
            echo "✅ All restaurant databases pinged successfully"
          else
            echo "⚠️ Some restaurant database pings failed"
          fi
          
          echo "Keep-alive job completed at $(date)"
